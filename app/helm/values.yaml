# Default values for application.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: us-central1-docker.pkg.dev/spheric-shield-451012-u9/docker-repo/application
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the serportvice account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations: 
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/service-upstream: "true"

    nginx.ingress.kubernetes.io/server-snippet: |
     location ~* "^/user" {
        set $namespace      "app";
        set $ingress_name   "application";
        set $service_name   "application";
        set $service_port   "80";
        set $location_path  "/";
        set $force_ssl_redirect "false";
        set $ssl_redirect "true";
        set $force_no_ssl_redirect "false";
        set $preserve_trailing_slash "false";
        set $use_port_in_redirects "false";
        rewrite_by_lua  '
          local auth = ngx.req.get_headers()["authorization"]
          ngx.log(ngx.NOTICE, "AUTH-Full:"..auth )
          local header, payload, signature = auth:match(" ([A-Za-z0-9-_=]+`?)%p([A-Za-z0-9-_=]+`?)%p([A-Za-z0-9-_+=]+`?)$")
          header = ngx.decode_base64(header)
          payload = ngx.decode_base64(payload)
          signature = ngx.decode_base64(signature)
          ngx.log(ngx.NOTICE, ">>>DECODED-HEADER:"..header..">>>DECODED-PAYLOAD:"..payload ) 
        ';
        header_filter_by_lua_file /etc/nginx/lua/nginx/ngx_conf_srv_hdr_filter.lua;
        log_by_lua_file /etc/nginx/lua/nginx/ngx_conf_log_block.lua;
        port_in_redirect off;
        set $balancer_ewma_score -1;
        set $proxy_upstream_name "app-application-80";
        set $proxy_host          $proxy_upstream_name;
        set $pass_access_scheme  $scheme;
        set $pass_server_port    $server_port;
        set $best_http_host      $http_host;
        set $pass_port           $pass_server_port;
        set $proxy_alternative_upstream_name "";
        client_max_body_size                    1m;
        proxy_set_header Host                   $best_http_host;
        # Pass the extracted client certificate to the backend
        # Allow websocket connections
        proxy_set_header                        Upgrade           $http_upgrade;
        proxy_set_header                        Connection        $connection_upgrade;
        proxy_set_header X-Request-ID           $req_id;
        proxy_set_header X-Real-IP              $remote_addr;
        proxy_set_header X-Forwarded-For        $remote_addr;
        proxy_set_header X-Forwarded-Host       $best_http_host;
        proxy_set_header X-Forwarded-Port       $pass_port;
        proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
        proxy_set_header X-Forwarded-Scheme     $pass_access_scheme;
        proxy_set_header X-Scheme               $pass_access_scheme;
        # Pass the original X-Forwarded-For
        proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
        # mitigate HTTPoxy Vulnerability
        # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
        proxy_set_header Proxy                  "";
        # Custom headers to proxied server
        proxy_connect_timeout                   5s;
        proxy_send_timeout                      60s;
        proxy_read_timeout                      60s;
        proxy_buffering                         off;
        proxy_buffer_size                       4k;
        proxy_buffers                           4 4k;
        proxy_max_temp_file_size                1024m;
        proxy_request_buffering                 on;
        proxy_http_version                      1.1;
        proxy_cookie_domain                     off;
        proxy_cookie_path                       off;
        # In case of errors try the next upstream server before returning an error
        proxy_next_upstream                     error timeout;
        proxy_next_upstream_timeout             0;
        proxy_next_upstream_tries               3;
        # Custom Response Headers
        proxy_pass http://upstream_balancer;
        proxy_redirect                          off;
      }
      location ~* "^/login" {
        set $namespace      "app";
        set $ingress_name   "application";
        set $service_name   "application";
        set $service_port   "80";
        set $location_path  "/";
        set $force_ssl_redirect "false";
        set $ssl_redirect "true";
        set $force_no_ssl_redirect "false";
        set $preserve_trailing_slash "false";
        set $use_port_in_redirects "false";
        rewrite_by_lua  '
          local cjson = require("cjson")
          ngx.req.read_body()
          local request_body = ngx.req.get_body_data()
          local email = cjson.decode(request_body).email
          local enc = ngx.encode_base64(email)
          ngx.log(ngx.NOTICE, "EMAIL:" ..enc) 
          ';
        header_filter_by_lua_file /etc/nginx/lua/nginx/ngx_conf_srv_hdr_filter.lua;
        log_by_lua_file /etc/nginx/lua/nginx/ngx_conf_log_block.lua;
        port_in_redirect off;
        set $balancer_ewma_score -1;
        set $proxy_upstream_name "app-application-80";
        set $proxy_host          $proxy_upstream_name;
        set $pass_access_scheme  $scheme;
        set $pass_server_port    $server_port;
        set $best_http_host      $http_host;
        set $pass_port           $pass_server_port;
        set $proxy_alternative_upstream_name "";
        client_max_body_size                    1m;
        proxy_set_header Host                   $best_http_host;
        # Pass the extracted client certificate to the backend
        # Allow websocket connections
        proxy_set_header                        Upgrade           $http_upgrade;
        proxy_set_header                        Connection        $connection_upgrade;
        proxy_set_header X-Request-ID           $req_id;
        proxy_set_header X-Real-IP              $remote_addr;
        proxy_set_header X-Forwarded-For        $remote_addr;
        proxy_set_header X-Forwarded-Host       $best_http_host;
        proxy_set_header X-Forwarded-Port       $pass_port;
        proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
        proxy_set_header X-Forwarded-Scheme     $pass_access_scheme;
        proxy_set_header X-Scheme               $pass_access_scheme;
        # Pass the original X-Forwarded-For
        proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
        # mitigate HTTPoxy Vulnerability
        # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
        proxy_set_header Proxy                  "";
        # Custom headers to proxied server
        proxy_connect_timeout                   5s;
        proxy_send_timeout                      60s;
        proxy_read_timeout                      60s;
        proxy_buffering                         off;
        proxy_buffer_size                       4k;
        proxy_buffers                           4 4k;
        proxy_max_temp_file_size                1024m;
        proxy_request_buffering                 on;
        proxy_http_version                      1.1;
        proxy_cookie_domain                     off;
        proxy_cookie_path                       off;
        # In case of errors try the next upstream server before returning an error
        proxy_next_upstream                     error timeout;
        proxy_next_upstream_timeout             0;
        proxy_next_upstream_tries               3;
        # Custom Response Headers
        proxy_pass http://upstream_balancer;
        proxy_redirect                          off;
      }
## rewrite_by_lua ' proxy_pass http://upstream_balancer;
##               ngx.req.read_body()
##              local args = ngx.req.get_post_args()
##               for key, val in pairs(args) do
##                  if (key == "key") then
##                           ngx.req.set_uri("/"..val,true)
##                  end
##                end
##';

  hosts:
    - host: jwt.local
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: application
              servicePort: 80
  tls: []


 
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local




resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/

#readinessProbe:
#  exec:
#    command:
#      - "ls"
#livenessProbe:
#  exec:
#    command: 
#      - "ls"
#startupProbe:
#  exec:
#    command:
#      - "ls"

livenessProbe:
  httpGet:
    path: /health
    port: 80
  initialDelaySeconds: 5
  periodSeconds: 10
readinessProbe:
  httpGet:
    path: /health
    port: 80
  initialDelaySeconds: 5
  periodSeconds: 10

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
